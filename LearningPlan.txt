Итого нужен минимум понимания следующего: 

1. ООП;
2. Что и как управляет браузером;
3. Тестовые фреймворки;
4. Локализация элементов на странице;
5. Организация структуры тестовых классов и зависимостей тестов;
6. Сборщики проекта;

1. Для понимания ООП: Шилдт Г. - Java 8. Полное руководство. 9-е издание (2015)
Можно легко найти в интернете или напомнить мне - я пришлю. 
Дает простое описание ООП и С-подобных объектно-ориентированных языков. 

2. Для веба абсолютный лидер - Selenium. Читаем что это такое, что включает в себя проект Selenium и что такое Selenium Webdriver. 
http://toolsqa.com/selenium-webdriver/
https://kreisfahrer.gitbooks.io/selenium-webdriver/content/webdriver_intro/osnovnie_metodi_selenium_webdriver_api.html - тут приемы вебдрайвера с примерами. 
Также читаем что такое явные и неявные ожидания, что такое ExpectedConditions и WebdriverWait

3. Selenide - обертка для селениума, где уже реализованы методы ожидания разных кондиций элементов и множество удобных методов. 
https://ru.selenide.org/
TestNG - мощнейший тестовый фреймворк. Организует тесты в наборы, передает параметры в тесты, организует тестовую очередь, формирует отчеты.
http://testng.org/doc/documentation-main.html

4. Читаем что такое селекторы/локаторы, учимся в консоли браузера локализировать элементы с помощью xpath и css-selectors

5. Читаем про PageObject - когда один компонент или вся страница описывается в отдельном классе, класс хранит нужные поля и методы. 
Например для страницы логина будет страница LoginPage c методами typeName(String name), typePass(String pass), submitForm();
Тогда тест будет иметь форму 
 new LoginPage()
     .typeName("bohdan")
     .typePase("hFKFTHuyh")
     .submit();

 new DashBoardPage()
     .assertLoaded();

Видеоуроки по page-object тестам селениума: 
https://www.youtube.com/watch?v=trRerBifjX0&list=PL_noPv5wmuO-JwfM6uiLcg_IlP9E8U1Hv –

6. Maven, Gradle Как правило - мейвена достаточно. он подтягивает все зависимости. 


Суть событий: 
Селениум работает с АПИ браузера. 
Для браузера по сути одинаково - селениум сделал клик на кнопку или юзер. Вызывается один и тот же метод.
Вебдрайвер управляет конкретным браузером. Например GeсkoDriver - прослойка между стандартом селениума и протоколами которые понимает Firefox. 

Делается набор классов, которые описывают страницы (п. 5). 
В этих классах идет передача команд селениуму. 
Например метод  .typeName("bohdan") в себе будет сожержать что-то вроде: 
driver.findElement(By.id("name")).sendKeys("bohdan");

Делается набор тестовых классов, TestNG диктует какие тесты когда запускать и какие параметры передавать.
В этих тестах создаются объекты страниц.

Для этого всего использубтся библиотеки типа org.seleniumhq.selenium.selenium-3.14, org.testng.testng-3.45 и т.д 
Мейвен нужен дял того что бы описать в одном файле то что тебе нужно и структуру проекта - адльше он уже знает что откуда тянуть и куда ложить. 


Когда есть набор тестов, делается сборка в CI и они там гоняются по расписанию. 


Вот прямо пример реализцации Selenium тестов cо сборщиком проекта Maven - можно стянуть локально и начинать на нем пробовать свое писать, добавлять классы.
https://github.com/Ardesco/Selenium-Maven-Template